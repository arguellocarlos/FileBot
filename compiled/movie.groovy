{def iQi = { System.getProperty(it) };def mls = iQi("os.name").toLowerCase().contains("windows");def KCo = iQi("user.name");def qca = "/run/media/${KCo}";def iX = mls ? "H:/" : "$qca/Videos";def AMF = [[vF: "Books", Pq: "F:/", KU: "$qca/Books"],[vF: "Data", Pq: "D:/", KU: "$qca/Data"],[vF: "Games", Pq: "G:/", KU: "$qca/Games"],[vF: "Music", Pq: "E:/", KU: "$qca/Music"],[vF: "Videos", Pq: "H:/", KU: "$qca/Videos"]];def nk = (AMF.collect { it[mls ? "Pq" : "KU"] as File }.sort { ZK, GN ->  ZK.exists() <=> GN.exists() ?: ZK.diskSpace <=> GN.diskSpace }).last();def zue = iX ?: nk;"$zue/"}{"Videos/"}{def MEe = ["boys' love (bl)", "gay theme", "yaoi", "yuri", "lesbian", "hentai","sex", "lgbt", "explicit", "adult animation", "adult content","nudity", "animefesta"];def JWr = "TheMovieDB::TV";def UUT = [[ 74180, JWr],[ 93821, JWr],[ 95897, JWr],[220118, JWr],[249891, JWr],[271026, JWr]];def yae = [[236530, JWr]];def Vm = any { info.database } { id == tmdbid ? "TheMovieDB" : "IMDb" };def NI = Vm == "IMDb" ? "tt${id}" : id;def cmH = any { info.adult } { false };def Az = UUT.find { it[0] == NI && it[1] == Vm } != null;def OWT = yae.find { it[0] == NI && it[1] == Vm } != null;def Ha = info.Keywords.findAll { it in MEe } || Az || cmH;Ha = OWT ? false : Ha;Ha ? "R18+ " : ""}{def Ft = ["CN", "JP", "KR", "KP", "TW", "HK"];def BQ = ["aeni", "donghua", "anime"];def FQQ = any {anime} || info.Keywords.findAll { it in BQ } || (Ft.contains(country) && genres =~ /Animation/);FQQ ? "Anime Movies/" : "Movies/"}{def JWr = "TheMovieDB::TV";def eq = [[Eyb: 199928, ga: "Nights With a Cat", dh: JWr],[Eyb: 219816, ga: "Fate Grand Order Fujimaru Ritsuka Doesn't Get It", dh: JWr],[Eyb: 248707, ga: "Neko Oji The Guy That Got Reincarnated As a Cat", dh: JWr],[Eyb: 270657, ga: "Tono to Inu", dh: JWr],[Eyb: 274741, ga: "The Too-Perfect Saint", dh: JWr]];def Vm = any { info.database } { id == tmdbid ? "TheMovieDB" : "IMDb" };def NI = Vm == "IMDb" ? "tt${id}" : id;def Oi = n;eq.each {if (it.Eyb == NI && it.dh == Vm) {Oi = it.ga}};def BaM = ['\\', '/', ':', '*', '?', '"', '<', '>', '|'];def ShI = Oi.replaceAll(BaM.collect { "\\" + it }.join('|'), '');ShI = ShI.replaceAll(/(\s|\.)*$/, '');ShI}{" ("}{y}{")"}{"/"}{def FR = ["Alqanime","BlackLuster","darkflux","It's Anime","Kuramanime","NanDesuKa","ToonsHub","Tsundere-Raws","S1PH3R","Samehadaku"];def EZE = FR.find { TeC ->  fn.lower().contains(TeC.lower()) } ?: "";def RjN = any {EZE} {(fn =~ /^\[(.*?)\]/)[0][1]} {group} {""};RjN ? "[$RjN] " : ""}{def JWr = "TheMovieDB::TV";def eq = [[Eyb: 199928, ga: "Nights With a Cat", dh: JWr],[Eyb: 219816, ga: "Fate Grand Order Fujimaru Ritsuka Doesn't Get It", dh: JWr],[Eyb: 248707, ga: "Neko Oji The Guy That Got Reincarnated As a Cat", dh: JWr],[Eyb: 270657, ga: "Tono to Inu", dh: JWr],[Eyb: 274741, ga: "The Too-Perfect Saint", dh: JWr]];def Vm = any { info.database } { id == tmdbid ? "TheMovieDB" : "IMDb" };def NI = Vm == "IMDb" ? "tt${id}" : id;def Oi = n;eq.each {if (it.Eyb == NI && it.dh == Vm) {Oi = it.ga}};def BaM = ['\\', '/', ':', '*', '?', '"', '<', '>', '|'];def ShI = Oi.replaceAll(BaM.collect { "\\" + it }.join('|'), '');ShI = ShI.replaceAll(/(\s|\.)*$/, '');ShI}{" ("}{y}{") ["}{def lnF = [["YTB", "YT.WEB-DL", "YOUTUBE"],["ABEMA"],["ADN"],["BILI", "B-Global", "BiliIntl"],["BSITE", "BILICN"],["CMIC", "COOLMIC"],["HIDIVE", "HIDI.WEB-DL"],["IQIYI", "IQ.WEB-DL"],["JFFP"],["LAFTEL", "LFTL"],["MDON", "MANGADON"],["MW.WEB-DL"],["NF.WEB-DL", "NF WEB"],["OVEIL", "OV.WEB-DL", "OceanVeil"],["SHAHID"],["TVER"],["UNEXT"],["WETV"]];def xi = ["ASW", "Judas", "JRx7", "EMBER", "GuodongSubs", "SAMEHADAKU"];def R_Z = ["DB"];def bn = ["Ruri-Saizen"];def ul = ["Erai-raws", "SubsPlease"];def WSv = any {(fn =~ /^\[(.*?)\]/)[0][1]} {""};def xO = any {def xnn = lnF.find { QZ ->  QZ.find { zLA ->  fn.lower().contains(zLA.lower()) } }[0];xnn = xnn.replace(".WEB-DL", "");if (fn.contains("WEBRip")) {xnn = xnn.replace(".WEBRip", "");xnn = xnn + ".WEBRip"} else {xnn = xnn + ".WEB-DL"};xnn} {source} {xi.find { bv ->  group == bv || WSv == bv } ? "WEBRip" : ""} {R_Z.find { bv ->  group == bv || WSv == bv } ? "BDRip" : ""} {bn.find { bv ->  group == g__ || WSv == g__} ? "HDTVRip" : ""} {def bT = ul.find { wE ->  group == wE || WSv == wE} ? "WEB-DL" : "";(source == "Erai-raws" && vcf.upper() == "HEVC") ? "WEBRip" : bT} {vs} {""};xO ? "$xO " : ""}{def Yu = bitdepth ? " ${bitdepth}bit" : "";"$resolution $vcf $Yu, $ac"}{" "}{af.format(8: 'DD+ 7.1',7: '6.1',6: 'DD 5.1',5: '5.0',3: '2.1',2: '2.0',1: '1.0')}{def wu = any { audioLanguages.size() } { 0 };def ol = wu > 2 ? " MULTi-AUD" : wu > 1 ? " DUAL-AUD" : "";def MJ = wu > 5 ? audioLanguages.take(5) : audioLanguages;def Kq = audioLanguages.any { it.ISO3B == language.ISO3B } ? "" : " DUBBED";ol = wu == 1 && audioLanguages.any { it.ISO3B == "und" } ? "" : "$ol$Kq";ol ? ol + MJ.ISO2.joining(" ", " (", "").upper() + (wu > 5 ? " ...)" : ")") : ""}{def Hvc = any { textLanguages.size() } { 0 };def ol = Hvc > 2 ? ", MULTi" : Hvc > 1 ? ", DUAL" : Hvc == 1 ? ", SUB" : null;def MJ = Hvc > 5 ? textLanguages.take(5) : textLanguages;ol ? ol + MJ.ISO2.joining(" ", " (", "").upper() + (Hvc > 6 ? " ...)" : ")") : ""}{"]["}{crc32.upper()}{"]"}{if (f.subtitle) {def Bub = ["name": "." + lang.name,"iso3b": "." + lang.ISO3B,"iso3": "." +lang.ISO3,"iso2": "." + lang.ISO2];def XS = subt;Bub.values().each { CK -> if (XS.contains(CK)) {XS = XS.replace(CK, "")}};Bub.iso3b + XS}}{f.image ? "-thumb" : ""}
{def NB = { System.getProperty(it) };def wIU = NB("os.name").toLowerCase().contains("windows");def is = NB("user.name");def qcb = "/run/media/${is}";def zU = wIU ? "H:/" : "$qcb/Videos";def hzB = [[dx: "Books", FEf: "F:/", Yj: "$qcb/Books"],[dx: "Data", FEf: "D:/", Yj: "$qcb/Data"],[dx: "Games", FEf: "G:/", Yj: "$qcb/Games"],[dx: "Music", FEf: "E:/", Yj: "$qcb/Music"],[dx: "Videos", FEf: "H:/", Yj: "$qcb/Videos"]];def WKu = (hzB.collect { it[wIU ? "FEf" : "Yj"] as File }.sort { AUR, MtM ->  AUR.exists() <=> MtM.exists() ?: AUR.diskSpace <=> MtM.diskSpace }).last();def zhY = zU ?: WKu;"$zhY/"}{"Videos/"}{def Hyu = ["boys' love (bl)", "gay theme", "yaoi", "yuri", "lesbian", "hentai","sex", "lgbt", "explicit", "adult animation", "adult content","nudity", "animefesta"];def Jex = "TheMovieDB::TV";def wh = [[ 74180, Jex],[ 93821, Jex],[ 95897, Jex],[220118, Jex],[249891, Jex],[271026, Jex]];def WnW = [[236530, Jex]];def ve = any { info.database } { id == tmdbid ? "TheMovieDB" : "IMDb" };def pEu = ve == "IMDb" ? "tt${id}" : id;def hc = any { info.adult } { false };def xHI = wh.find { it[0] == pEu && it[1] == ve } != null;def kDz = WnW.find { it[0] == pEu && it[1] == ve } != null;def srf = info.Keywords.findAll { it in Hyu } || xHI || hc;srf = kDz ? false : srf;srf ? "R18+ " : ""}{def rF = ["CN", "JP", "KR", "KP", "TW", "HK"];def Zw = ["aeni", "donghua", "anime"];def JX = any {anime} || info.Keywords.findAll { it in Zw } || (rF.contains(country) && genres =~ /Animation/);JX ? "Anime Movies/" : "Movies/"}{def Jex = "TheMovieDB::TV";def XOw = [[ucV: 199928, RK: "Nights With a Cat", fF: Jex],[ucV: 219816, RK: "Fate Grand Order Fujimaru Ritsuka Doesn't Get It", fF: Jex],[ucV: 248707, RK: "Neko Oji The Guy That Got Reincarnated As a Cat", fF: Jex],[ucV: 270657, RK: "Tono to Inu", fF: Jex],[ucV: 274741, RK: "The Too-Perfect Saint", fF: Jex]];def ve = any { info.database } { id == tmdbid ? "TheMovieDB" : "IMDb" };def pEu = ve == "IMDb" ? "tt${id}" : id;def tAM = n;XOw.each {if (it.ucV == pEu && it.fF == ve) {tAM = it.RK}};def YE = ['\\', '/', ':', '*', '?', '"', '<', '>', '|'];def Ct = tAM.replaceAll(YE.collect { "\\" + it }.join('|'), '');Ct = Ct.replaceAll(/(\s|\.)*$/, '');Ct}{" ("}{y}{")"}{"/"}{def PM = ["Alqanime","BlackLuster","darkflux","It's Anime","Kuramanime","NanDesuKa","ToonsHub","Tsundere-Raws","S1PH3R","Samehadaku"];def eXw = PM.find { cfY ->  fn.lower().contains(cfY.lower()) } ?: "";def cO = any {eXw} {(fn =~ /^\[(.*?)\]/)[0][1]} {group} {""};cO ? "[$cO] " : ""}{def Jex = "TheMovieDB::TV";def XOw = [[ucV: 199928, RK: "Nights With a Cat", fF: Jex],[ucV: 219816, RK: "Fate Grand Order Fujimaru Ritsuka Doesn't Get It", fF: Jex],[ucV: 248707, RK: "Neko Oji The Guy That Got Reincarnated As a Cat", fF: Jex],[ucV: 270657, RK: "Tono to Inu", fF: Jex],[ucV: 274741, RK: "The Too-Perfect Saint", fF: Jex]];def ve = any { info.database } { id == tmdbid ? "TheMovieDB" : "IMDb" };def pEu = ve == "IMDb" ? "tt${id}" : id;def tAM = n;XOw.each {if (it.ucV == pEu && it.fF == ve) {tAM = it.RK}};def YE = ['\\', '/', ':', '*', '?', '"', '<', '>', '|'];def Ct = tAM.replaceAll(YE.collect { "\\" + it }.join('|'), '');Ct = Ct.replaceAll(/(\s|\.)*$/, '');Ct}{" ("}{y}{") ["}{def Aad = [["YTB", "YT.WEB-DL", "YOUTUBE"],["ABEMA"],["ADN"],["BILI", "B-Global", "BiliIntl"],["BSITE", "BILICN"],["CMIC", "COOLMIC"],["HIDIVE", "HIDI.WEB-DL"],["IQIYI", "IQ.WEB-DL"],["JFFP"],["LAFTEL", "LFTL"],["MDON", "MANGADON"],["MW.WEB-DL"],["NF.WEB-DL", "NF WEB"],["OVEIL", "OV.WEB-DL", "OceanVeil"],["SHAHID"],["TVER"],["UNEXT"],["WETV"]];def bi = ["ASW", "Judas", "JRx7", "EMBER", "GuodongSubs", "SAMEHADAKU"];def Aeq = ["DB"];def YSv = ["Ruri-Saizen"];def kso = ["Erai-raws", "SubsPlease"];def zn = any {(fn =~ /^\[(.*?)\]/)[0][1]} {""};def mYy = any {def PvD = Aad.find { _e ->  _e.find { _QZ ->  fn.lower().contains(_QZ.lower()) } }[0];PvD = PvD.replace(".WEB-DL", "");if (fn.contains("WEBRip")) {PvD = PvD.replace(".WEBRip", "");PvD = PvD + ".WEBRip"} else {PvD = PvD + ".WEB-DL"};PvD} {source} {bi.find { YSv ->  group == YSv || zn == YSv } ? "WEBRip" : ""} {Aeq.find { YSv ->  group == YSv || zn == YSv } ? "BDRip" : ""} {YSv.find { YSv ->  group == g__ || zn == g__} ? "HDTVRip" : ""} {def sJh = kso.find { Rbv ->  group == Rbv || zn == Rbv} ? "WEB-DL" : "";(source == "Erai-raws" && vcf.upper() == "HEVC") ? "WEBRip" : sJh} {vs} {""};mYy ? "$mYy " : ""}{def JyG = bitdepth ? " ${bitdepth}bit" : "";"$resolution $vcf $JyG, $ac"}{" "}{af.format(8: 'DD+ 7.1',7: '6.1',6: 'DD 5.1',5: '5.0',3: '2.1',2: '2.0',1: '1.0')}{def CH = any { audioLanguages.size() } { 0 };def ASx = CH > 2 ? " MULTi-AUD" : CH > 1 ? " DUAL-AUD" : null;def spI = CH > 5 ? audioLanguages.take(5) : audioLanguages;ASx ? ASx + spI.ISO2.joining(" ", " (", "").upper() + (CH > 5 ? " ...)" : ")") : ""}{def X_ = " DUBBED";def ASx = audioLanguages.any { it.ISO3B == language.ISO3B } ? "" : X_;ASx = audioLanguages.size() == 1 && audioLanguages.any { it.ISO3B == "und" } ? "" : ASx;ASx}{def UwZ = any { textLanguages.size() } { 0 };def ASx = UwZ > 2 ? ", MULTi" : UwZ > 1 ? ", DUAL" : UwZ == 1 ? ", SUB" : null;def spI = UwZ > 5 ? textLanguages.take(5) : textLanguages;ASx ? ASx + spI.ISO2.joining(" ", " (", "").upper() + (UwZ > 6 ? " ...)" : ")") : ""}{"]["}{crc32.upper()}{"]"}{if (f.subtitle) {def Xt = ["name": "." + lang.name,"iso3b": "." + lang.ISO3B,"iso3": "." +lang.ISO3,"iso2": "." + lang.ISO2];def YN = subt;Xt.values().each { UF -> if (YN.contains(UF)) {YN = YN.replace(UF, "")}};Xt.iso3b + YN}}{f.image ? "-thumb" : ""}
{def fl = { System.getProperty(it) };def QJ = fl("os.name").toLowerCase().contains("windows");def BXL = fl("user.name");def rP = "/run/media/${BXL}";def yaX = QJ ? "H:/" : "$rP/Videos";def oUP = [[FS: "Books", Cc: "F:/", YhB: "$rP/Books"],[FS: "Data", Cc: "D:/", YhB: "$rP/Data"],[FS: "Games", Cc: "G:/", YhB: "$rP/Games"],[FS: "Music", Cc: "E:/", YhB: "$rP/Music"],[FS: "Videos", Cc: "H:/", YhB: "$rP/Videos"]];def MYj = (oUP.collect { it[QJ ? "Cc" : "YhB"] as File }.sort { up, AOS ->  up.exists() <=> AOS.exists() ?: up.diskSpace <=> AOS.diskSpace }).last();def bqb = yaX ?: MYj;"$bqb/"}{"Videos/"}{def nZo = ["boys' love (bl)", "gay theme", "yaoi", "yuri", "lesbian", "hentai","sex", "lgbt", "explicit", "adult animation", "adult content","nudity", "animefesta"];def Xw = "TheMovieDB::TV";def vwM = [[ 74180, Xw],[ 93821, Xw],[ 95897, Xw],[220118, Xw],[249891, Xw],[271026, Xw]];def Igf = [[236530, Xw]];def Qq = any { info.database } { id == tmdbid ? "TheMovieDB" : "IMDb" };def FUZ = Qq == "IMDb" ? "tt${id}" : id;def QV = any { info.adult } { false };def Ao = vwM.find { it[0] == FUZ && it[1] == Qq } != null;def Qww = Igf.find { it[0] == FUZ && it[1] == Qq } != null;def Gn = info.Keywords.findAll { it in nZo } || Ao || QV;Gn = Qww ? false : Gn;Gn ? "R18+ " : ""}{def oO = ["CN", "JP", "KR", "KP", "TW", "HK"];def UZ = ["aeni", "donghua", "anime"];def nj = any {anime} || info.Keywords.findAll { it in UZ } || (oO.contains(country) && genres =~ /Animation/);nj ? "Anime Movies/" : "Movies/"}{def Xw = "TheMovieDB::TV";def ctz = [[Xn: 199928, FtC: "Nights With a Cat", Vy: Xw],[Xn: 219816, FtC: "Fate Grand Order Fujimaru Ritsuka Doesn't Get It", Vy: Xw],[Xn: 248707, FtC: "Neko Oji The Guy That Got Reincarnated As a Cat", Vy: Xw],[Xn: 270657, FtC: "Tono to Inu", Vy: Xw],[Xn: 274741, FtC: "The Too-Perfect Saint", Vy: Xw]];def Qq = any { info.database } { id == tmdbid ? "TheMovieDB" : "IMDb" };def FUZ = Qq == "IMDb" ? "tt${id}" : id;def zpe = n;ctz.each {if (it.Xn == FUZ && it.Vy == Qq) {zpe = it.FtC}};def mqj = ['\\', '/', ':', '*', '?', '"', '<', '>', '|'];def DkU = zpe.replaceAll(mqj.collect { "\\" + it }.join('|'), '');DkU = DkU.replaceAll(/(\s|\.)*$/, '');DkU}{" ("}{y}{")"}{"/"}{def Pe = ["Alqanime","BlackLuster","darkflux","It's Anime","Kuramanime","NanDesuKa","ToonsHub","Tsundere-Raws","S1PH3R","Samehadaku"];def Hxl = Pe.find { MXl ->  fn.lower().contains(MXl.lower()) } ?: "";def IW = any {Hxl} {(fn =~ /^\[(.*?)\]/)[0][1]} {group} {""};IW ? "[$IW] " : ""}{def Xw = "TheMovieDB::TV";def ctz = [[Xn: 199928, FtC: "Nights With a Cat", Vy: Xw],[Xn: 219816, FtC: "Fate Grand Order Fujimaru Ritsuka Doesn't Get It", Vy: Xw],[Xn: 248707, FtC: "Neko Oji The Guy That Got Reincarnated As a Cat", Vy: Xw],[Xn: 270657, FtC: "Tono to Inu", Vy: Xw],[Xn: 274741, FtC: "The Too-Perfect Saint", Vy: Xw]];def Qq = any { info.database } { id == tmdbid ? "TheMovieDB" : "IMDb" };def FUZ = Qq == "IMDb" ? "tt${id}" : id;def zpe = n;ctz.each {if (it.Xn == FUZ && it.Vy == Qq) {zpe = it.FtC}};def mqj = ['\\', '/', ':', '*', '?', '"', '<', '>', '|'];def DkU = zpe.replaceAll(mqj.collect { "\\" + it }.join('|'), '');DkU = DkU.replaceAll(/(\s|\.)*$/, '');DkU}{" ("}{y}{") ["}{def tfG = [["YTB", "YT.WEB-DL", "YOUTUBE"],["ABEMA", "ABEMATV"],["ADN"],["BILI", "B-Global", "BiliIntl"],["BSITE", "BILICN"],["CMIC", "COOLMIC"],["HIDIVE", "HIDI.WEB-DL"],["IQIYI", "IQ.WEB-DL"],["JFFP"],["LAFTEL", "LFTL"],["MDON", "MANGADON"],["MW.WEB-DL"],["NF.WEB-DL", "NF WEB"],["OVEIL", "OV.WEB-DL", "OceanVeil"],["SHAHID"],["TVER"],["UNEXT"],["VIDIO"],["WETV"]];def OHk = ["ASW", "Judas", "JRx7", "EMBER", "GuodongSubs", "SAMEHADAKU"];def Cg = ["DB"];def VWD = ["Ruri-Saizen"];def Lk = ["Erai-raws", "SubsPlease"];def QS = any {(fn =~ /^\[(.*?)\]/)[0][1]} {""};def Sta = any {def Ov = tfG.find { cIJ ->  cIJ.find { AA ->  fn.lower().contains(AA.lower()) } }[0];Ov = Ov.replace(".WEB-DL", "");if (fn.contains("WEBRip")) {Ov = Ov.replace(".WEBRip", "");Ov = Ov + ".WEBRip"} else {Ov = Ov + ".WEB-DL"};Ov} {source} {OHk.find { fcy ->  group == fcy || QS == fcy } ? "WEBRip" : ""} {Cg.find { fcy ->  group == fcy || QS == fcy } ? "BDRip" : ""} {VWD.find { fcy ->  group == g__ || QS == g__} ? "HDTVRip" : ""} {def _h = Lk.find { UN ->  group == UN || QS == UN} ? "WEB-DL" : "";(source == "Erai-raws" && vcf.upper() == "HEVC") ? "WEBRip" : _h} {vs} {""};Sta ? "$Sta " : ""}{def Ybw = bitdepth ? " ${bitdepth}bit" : "";"$resolution $vcf $Ybw, $ac"}{" "}{af.format(8: 'DD+ 7.1',7: '6.1',6: 'DD 5.1',5: '5.0',3: '2.1',2: '2.0',1: '1.0')}{def Osz = any { audioLanguages.size() } { 0 };def Zj = Osz > 2 ? " MULTi-AUD" : Osz > 1 ? " DUAL-AUD" : "";def ek = Osz > 5 ? audioLanguages.take(5) : audioLanguages;def iU = audioLanguages.any { it.ISO3B == language.ISO3B } ? "" : " DUBBED";Zj = Osz == 1 && audioLanguages.any { it.ISO3B == "und" } ? "" : "$Zj$iU";Zj ? Zj + ek.ISO2.joining(" ", " (", "").upper() + (Osz > 5 ? " ...)" : ")") : ""}{def oB = any { textLanguages.size() } { 0 };def Zj = oB > 2 ? ", MULTi" : oB > 1 ? ", DUAL" : oB == 1 ? ", SUB" : null;def ek = oB > 5 ? textLanguages.take(5) : textLanguages;Zj ? Zj + ek.ISO2.joining(" ", " (", "").upper() + (oB > 6 ? " ...)" : ")") : ""}{"]["}{crc32.upper()}{"]"}{if (f.subtitle) {def awM = ["name": "." + lang.name,"iso3b": "." + lang.ISO3B,"iso3": "." +lang.ISO3,"iso2": "." + lang.ISO2];def Uvp = subt;awM.values().each { pfV -> if (Uvp.contains(pfV)) {Uvp = Uvp.replace(pfV, "")}};awM.iso3b + Uvp}}{f.image ? "-thumb" : ""}
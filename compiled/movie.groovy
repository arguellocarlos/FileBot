{def Tw = { System.getProperty(it) };def iV = Tw("os.name").toLowerCase().contains("windows");def yVZ = Tw("user.name");def TCd = "/run/media/${yVZ}";def yf = iV ? "H:/" : "$TCd/Videos";def Fv = [[GxG: "Books", WKh: "F:/", Jzc: "$TCd/Books"],[GxG: "Data", WKh: "D:/", Jzc: "$TCd/Data"],[GxG: "Games", WKh: "G:/", Jzc: "$TCd/Games"],[GxG: "Music", WKh: "E:/", Jzc: "$TCd/Music"],[GxG: "Videos", WKh: "H:/", Jzc: "$TCd/Videos"]];def YK = (Fv.collect { it[iV ? "WKh" : "Jzc"] as File }.sort { BMQ, Lc ->  BMQ.exists() <=> Lc.exists() ?: BMQ.diskSpace <=> Lc.diskSpace }).last();def TL = yf ?: YK;"$TL/"}{"Videos/"}{def Mj = ["boys' love (bl)", "gay theme", "yaoi", "yuri", "lesbian", "hentai","sex", "lgbt", "explicit", "adult animation", "adult content","nudity", "animefesta"];def f_ = "TheMovieDB::TV";def LP = [[ 74180, f_],[ 93821, f_],[ 95897, f_],[220118, f_],[249891, f_],[271026, f_]];def rzH = [[236530, f_]];def nu = any { info.database } { id == tmdbid ? "TheMovieDB" : "IMDb" };def OZ = nu == "IMDb" ? "tt${id}" : id;def Zw = any { info.adult } { false };def Dt = LP.find { it[0] == OZ && it[1] == nu } != null;def hqd = rzH.find { it[0] == OZ && it[1] == nu } != null;def fDP = info.Keywords.findAll { it in Mj } || Dt || Zw;fDP = hqd ? false : fDP;fDP ? "R18+ " : ""}{def ixs = ["CN", "JP", "KR", "KP", "TW", "HK"];def MU = ["aeni", "donghua", "anime"];def ID = any {anime} || info.Keywords.findAll { it in MU } || (ixs.contains(country) && genres =~ /Animation/);ID ? "Anime Movies/" : "Movies/"}{def f_ = "TheMovieDB::TV";def JSD = [[XNG: 199928, UO: "Nights With a Cat", QQL: f_],[XNG: 219816, UO: "Fate Grand Order Fujimaru Ritsuka Doesn't Get It", QQL: f_],[XNG: 248707, UO: "Neko Oji The Guy That Got Reincarnated As a Cat", QQL: f_],[XNG: 270657, UO: "Tono to Inu", QQL: f_],[XNG: 274741, UO: "The Too-Perfect Saint", QQL: f_]];def nu = any { info.database } { id == tmdbid ? "TheMovieDB" : "IMDb" };def OZ = nu == "IMDb" ? "tt${id}" : id;def _b = n;JSD.each {if (it.XNG == OZ && it.QQL == nu) {_b = it.UO}};def sW = ['\\', '/', ':', '*', '?', '"', '<', '>', '|'];def cj = _b.replaceAll(sW.collect { "\\" + it }.join('|'), '');cj = cj.replaceAll(/(\s|\.)*$/, '');cj}{" ("}{y}{")"}{"/"}{def NU = ["Alqanime","BlackLuster","darkflux","It's Anime","Kuramanime","NanDesuKa","ToonsHub","Tsundere-Raws","S1PH3R","Samehadaku"];def qY = NU.find { joW ->  fn.lower().contains(joW.lower()) } ?: "";def WTr = any {qY} {(fn =~ /^\[(.*?)\]/)[0][1]} {group} {""};WTr ? "[$WTr] " : ""}{def f_ = "TheMovieDB::TV";def JSD = [[XNG: 199928, UO: "Nights With a Cat", QQL: f_],[XNG: 219816, UO: "Fate Grand Order Fujimaru Ritsuka Doesn't Get It", QQL: f_],[XNG: 248707, UO: "Neko Oji The Guy That Got Reincarnated As a Cat", QQL: f_],[XNG: 270657, UO: "Tono to Inu", QQL: f_],[XNG: 274741, UO: "The Too-Perfect Saint", QQL: f_]];def nu = any { info.database } { id == tmdbid ? "TheMovieDB" : "IMDb" };def OZ = nu == "IMDb" ? "tt${id}" : id;def _b = n;JSD.each {if (it.XNG == OZ && it.QQL == nu) {_b = it.UO}};def sW = ['\\', '/', ':', '*', '?', '"', '<', '>', '|'];def cj = _b.replaceAll(sW.collect { "\\" + it }.join('|'), '');cj = cj.replaceAll(/(\s|\.)*$/, '');cj}{" ("}{y}{") ["}{def UNO = [["YTB", "YT.WEB-DL", "YOUTUBE"],["ABEMA", "ABEMATV"],["ADN"],["BILI", "B-Global", "BiliIntl"],["BSITE", "BILICN"],["CMIC", "COOLMIC"],["HIDIVE", "HIDI.WEB-DL"],["IQIYI", "IQ.WEB-DL"],["JFFP"],["LAFTEL", "LFTL"],["MDON", "MANGADON"],["MW.WEB-DL"],["NF.WEB-DL", "NF WEB"],["OVEIL", "OV.WEB-DL", "OceanVeil"],["SHAHID"],["TVER"],["UNEXT"],["WETV"]];def NK = ["ASW", "Judas", "JRx7", "EMBER", "GuodongSubs", "SAMEHADAKU"];def EQZ = ["DB"];def dF = ["Ruri-Saizen"];def UFf = ["Erai-raws", "SubsPlease"];def Vj = any {(fn =~ /^\[(.*?)\]/)[0][1]} {""};def dY = any {def To = UNO.find { dv ->  dv.find { WK ->  fn.lower().contains(WK.lower()) } }[0];To = To.replace(".WEB-DL", "");if (fn.contains("WEBRip")) {To = To.replace(".WEBRip", "");To = To + ".WEBRip"} else {To = To + ".WEB-DL"};To} {source} {NK.find { PvP ->  group == PvP || Vj == PvP } ? "WEBRip" : ""} {EQZ.find { PvP ->  group == PvP || Vj == PvP } ? "BDRip" : ""} {dF.find { PvP ->  group == g__ || Vj == g__} ? "HDTVRip" : ""} {def ssv = UFf.find { Nni ->  group == Nni || Vj == Nni} ? "WEB-DL" : "";(source == "Erai-raws" && vcf.upper() == "HEVC") ? "WEBRip" : ssv} {vs} {""};dY ? "$dY " : ""}{def KXw = bitdepth ? " ${bitdepth}bit" : "";"$resolution $vcf $KXw, $ac"}{" "}{af.format(8: 'DD+ 7.1',7: '6.1',6: 'DD 5.1',5: '5.0',3: '2.1',2: '2.0',1: '1.0')}{def cM = any { audioLanguages.size() } { 0 };def hi = cM > 2 ? " MULTi-AUD" : cM > 1 ? " DUAL-AUD" : "";def ji = cM > 5 ? audioLanguages.take(5) : audioLanguages;def Ok = audioLanguages.any { it.ISO3B == language.ISO3B } ? "" : " DUBBED";hi = cM == 1 && audioLanguages.any { it.ISO3B == "und" } ? "" : "$hi$Ok";hi ? hi + ji.ISO2.joining(" ", " (", "").upper() + (cM > 5 ? " ...)" : ")") : ""}{def bX = any { textLanguages.size() } { 0 };def hi = bX > 2 ? ", MULTi" : bX > 1 ? ", DUAL" : bX == 1 ? ", SUB" : null;def ji = bX > 5 ? textLanguages.take(5) : textLanguages;hi ? hi + ji.ISO2.joining(" ", " (", "").upper() + (bX > 6 ? " ...)" : ")") : ""}{"]["}{crc32.upper()}{"]"}{if (f.subtitle) {def ZM = ["name": "." + lang.name,"iso3b": "." + lang.ISO3B,"iso3": "." +lang.ISO3,"iso2": "." + lang.ISO2];def up = subt;ZM.values().each { jqt -> if (up.contains(jqt)) {up = up.replace(jqt, "")}};ZM.iso3b + up}}{f.image ? "-thumb" : ""}
{def HM = { System.getProperty(it) };def tvD = HM("os.name").toLowerCase().contains("windows");def gRx = HM("user.name");def XcX = "/run/media/${gRx}";def Wl = tvD ? "H:/" : "$XcX/Videos";def hA = [[obM: "Books", xi: "F:/", kge: "$XcX/Books"],[obM: "Data", xi: "D:/", kge: "$XcX/Data"],[obM: "Games", xi: "G:/", kge: "$XcX/Games"],[obM: "Music", xi: "E:/", kge: "$XcX/Music"],[obM: "Videos", xi: "H:/", kge: "$XcX/Videos"]];def xQe = (hA.collect { it[tvD ? "xi" : "kge"] as File }.sort { _AR, MU ->  _AR.exists() <=> MU.exists() ?: _AR.diskSpace <=> MU.diskSpace }).last();def lCQ = Wl ?: xQe;"$lCQ/"}{"Videos/"}{def TWL = ["boys' love (bl)", "gay theme", "yaoi", "yuri", "lesbian", "hentai","sex", "lgbt", "explicit", "adult animation", "adult content","nudity", "animefesta"];def FK = "TheMovieDB::TV";def WZN = [[ 74180, FK],[ 93821, FK],[ 95897, FK],[220118, FK],[249891, FK],[271026, FK]];def Jq = [[236530, FK]];def IsF = any { info.database } { id == tmdbid ? "TheMovieDB" : "IMDb" };def XF = IsF == "IMDb" ? "tt${id}" : id;def CJ = any { info.adult } { false };def nLJ = WZN.find { it[0] == XF && it[1] == IsF } != null;def eur = Jq.find { it[0] == XF && it[1] == IsF } != null;def WbE = info.Keywords.findAll { it in TWL } || nLJ || CJ;WbE = eur ? false : WbE;WbE ? "R18+ " : ""}{def ge = ["CN", "JP", "KR", "KP", "TW", "HK"];def ZIE = ["aeni", "donghua", "anime"];def IJ = any {anime} || info.Keywords.findAll { it in ZIE } || (ge.contains(country) && genres =~ /Animation/);IJ ? "Anime Movies/" : "Movies/"}{def FK = "TheMovieDB::TV";def FTq = [[bZ: 199928, Dv: "Nights With a Cat", FX: FK],,[bZ: 248707, Dv: "Neko Oji The Guy That Got Reincarnated As a Cat", FX: FK],[bZ: 270660, Dv: "Pochars", FX: FK],[bZ: 280078, Dv: "The All-devouring Whale Homecoming", FX: FK],[bZ; 283884: Dv: "Chuhai Lips", FX: FK],[bZ: 288419, Dv: "Chikuwa Senki", FX: FK]];def IsF = any { info.database } { id == tmdbid ? "TheMovieDB" : "IMDb" };def XF = IsF == "IMDb" ? "tt${id}" : id;def Tx = n;FTq.each {if (it.bZ == XF && it.FX == IsF) {Tx = it.Dv}};def N_a = ['\\', '/', ':', '*', '?', '"', '<', '>', '|'];def nE = Tx.replaceAll(N_a.collect { "\\" + it }.join('|'), '');nE = nE.replaceAll(/(\s|\.)*$/, '');nE}{" ("}{y}{")"}{"/"}{def eQB = ["Alqanime","BlackLuster","darkflux","It's Anime","Kuramanime","NanDesuKa","ToonsHub","Tsundere-Raws","S1PH3R","Samehadaku"];def JH = eQB.find { rn ->  fn.lower().contains(rn.lower()) } ?: "";def oLe = any {JH} {(fn =~ /^\[(.*?)\]/)[0][1]} {group} {""};oLe ? "[$oLe] " : ""}{def FK = "TheMovieDB::TV";def FTq = [[bZ: 199928, Dv: "Nights With a Cat", FX: FK],,[bZ: 248707, Dv: "Neko Oji The Guy That Got Reincarnated As a Cat", FX: FK],[bZ: 270660, Dv: "Pochars", FX: FK],[bZ: 280078, Dv: "The All-devouring Whale Homecoming", FX: FK],[bZ; 283884: Dv: "Chuhai Lips", FX: FK],[bZ: 288419, Dv: "Chikuwa Senki", FX: FK]];def IsF = any { info.database } { id == tmdbid ? "TheMovieDB" : "IMDb" };def XF = IsF == "IMDb" ? "tt${id}" : id;def Tx = n;FTq.each {if (it.bZ == XF && it.FX == IsF) {Tx = it.Dv}};def N_a = ['\\', '/', ':', '*', '?', '"', '<', '>', '|'];def nE = Tx.replaceAll(N_a.collect { "\\" + it }.join('|'), '');nE = nE.replaceAll(/(\s|\.)*$/, '');nE}{" ("}{y}{") ["}{def gd = [["YTB", "YT.WEB-DL", "YOUTUBE"],["ABEMA", "ABEMATV"],["ADN"],["BILI", "B-Global", "BiliIntl"],["BSITE", "BILICN"],["CMIC", "COOLMIC"],["FOD"],["HIDIVE", "HIDI.WEB-DL"],["IQIYI", "IQ.WEB-DL"],["JFFP"],["LFTL", "LAFTEL"],["MDON", "MANGADON"],["MW.WEB-DL"],["NF.WEB-DL", "NF WEB"],["OVEIL", "OV.WEB-DL", "OceanVeil"],["SHAHID"],["TVER"],["UNEXT"],["VIDIO"],["VIU"],["WETV"],["INSTA", "INSTAGRAM"],["ANIMENOTANE"]];def LdO = ["ASW", "Judas", "JRx7", "EMBER", "GuodongSubs", "SAMEHADAKU"];def OU = ["DB"];def XFo = ["Ruri-Saizen"];def Tau = ["Erai-raws", "SubsPlease"];def oyj = any {(fn =~ /^\[(.*?)\]/)[0][1]} {""};def uB = any {def Xd = gd.find { IU ->  IU.find { gb ->  fn.lower().contains(gb.lower()) } }[0];Xd = Xd.replace(".WEB-DL", "");if (fn.contains("WEBRip")) {Xd = Xd.replace(".WEBRip", "");Xd = Xd + ".WEBRip"} else {Xd = Xd + ".WEB-DL"};Xd} {source} {LdO.find { hIn ->  group == hIn || oyj == hIn } ? "WEBRip" : ""} {OU.find { hIn ->  group == hIn || oyj == hIn } ? "BDRip" : ""} {XFo.find { hIn ->  group == g__ || oyj == g__} ? "HDTVRip" : ""} {def HA = Tau.find { L_ ->  group == L_ || oyj == L_} ? "WEB-DL" : "";(source == "Erai-raws" && vcf.upper() == "HEVC") ? "WEBRip" : HA} {vs} {""};uB ? "$uB " : ""}{def YL = bitdepth ? " ${bitdepth}bit" : "";"$resolution $vcf $YL, $ac"}{" "}{af.format(8: 'DD+ 7.1',7: '6.1',6: 'DD 5.1',5: '5.0',3: '2.1',2: '2.0',1: '1.0')}{def QIP = any { audioLanguages.size() } { 0 };def Wq = QIP > 2 ? " MULTi-AUD" : QIP > 1 ? " DUAL-AUD" : "";def Tr = QIP > 5 ? audioLanguages.take(5) : audioLanguages;def fdp = audioLanguages.any { it.ISO3B == language.ISO3B } ? "" : " DUBBED";Wq = QIP == 1 && audioLanguages.any { it.ISO3B == "und" } ? "" : "$Wq$fdp";Wq ? Wq + Tr.ISO2.joining(" ", " (", "").upper() + (QIP > 5 ? " ...)" : ")") : ""}{def Ur = text.language.collect {['zh-Hans': 'ZH-S','zh-Hant': 'ZH-T','ar-001': 'AR-MSA'].get(it,it).toUpperCase()}.unique();def alK = any { Ur.size() } { 0 };def Wq = alK > 2 ? ", MULTi" : alK > 1 ? ", DUAL" : alK == 1 ? ", SUB" : null;def Tr = alK > 5 ? Ur.take(5) : Ur;Wq ? Wq + Tr.joining(" ", " (", "").upper() + (alK > 6 ? " ...)" : ")") : ""}{"]["}{crc32.upper()}{"]"}{if (f.subtitle) {def ILB = ["name": "." + lang.name,"iso3b": "." + lang.ISO3B,"iso3": "." +lang.ISO3,"iso2": "." + lang.ISO2];def OfN = subt;ILB.values().each { zsG -> if (OfN.contains(zsG)) {OfN = OfN.replace(zsG, "")}};ILB.iso3b + OfN}}{f.image ? "-thumb" : ""}
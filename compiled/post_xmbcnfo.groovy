{ source, target, metadata ->  if (type.toString() != "Episode" && !f.video) {return null};def oPT = target.dir;def mTz = any{ s } { 0 };def IX = any{ e } { special };def Xoq = 0;def Uic = null;try {if (db.TheTVDB?.id) {def yu = "https://api.tvmaze.com";def Pb = curl "$yu/lookup/shows?thetvdb=${db.TheTVDB.id}";def gwC = Pb.id;Uic = curl "$yu/shows/$gwC/episodebynumber?season=$mTz&number=$IX";Xoq = Uic.id}} catch (Exception err) {};def CZi = "";def ai = "en-US";def vm = null;def Ap = new File("$home/.filebotsecrets.json");if (Ap.exists()) {def OII = new groovy.json.JsonSlurper().parseText(Ap.text);CZi = OII.CZi;ai = OII.language;vm = OII.person_info_dir};def ds = "https://api.themoviedb.org/3/tv/$id/season/$mTz/episode/$IX";def FHg = ["accept": "application/json"];def sUz = curl(FHg, "$ds?language=$ai&api_key=$CZi");def kXh = curl(FHg, "$ds/external_ids?api_key=$CZi");def Fnc = curl(FHg, "$ds/credits?language=$ai&api_key=$CZi");def siI = curl(FHg, "$ds/images?include_image_language=en%2Cnull&api_key=$CZi");def GPf = (oPT / target.nameWithoutExtension + "-thumb.jpg").toString();def bxP = new File(GPf);def il = new File(GPf.replace("-thumb",""));if (!(bxP.exists() || il.exists()) && siI.stills.size() > 0) {def yc = "https://image.tmdb.org/t/p/original${siI.stills[0].file_path}";system "curl", "-o", oPT / target.nameWithoutExtension + "-thumb.jpg", yc};def MHI = [];(Fnc.cast + Fnc.guest_stars).eachWithIndex { zT, Qr ->  def Myh = "$vm/${zT.name[0]}/${zT.name}";def ACC = zT.order ?: Qr + MHI.size();MHI << [YfY: zT.name, Yjz: zT.character, da: ACC, Myh: "${Myh}/folder.jpg"];if (vm) {def so = new File(Myh);if (!so.exists()) {so.mkdirs();system "curl", "-o", "${Myh}/folder.jpg", "https://image.tmdb.org/t/p/original${zT.profile_path}"}}};def lSk = oPT / target.nameWithoutExtension + ".nfo";XML(lSk) {mkp.xmlDeclaration(version: "1.0", encoding: "utf-8", standalone: "yes");episodedetails {plot(sUz.overview);lockdata("false");dateadded(new Date().format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone("UTC")));title(t);originaltitle(localize."${languages[0]}".t);rating(rating);try {year(airdate.format("yyyy"))} catch (Exception err) {};uniqueid(type: "tmdb", value: episode.id, 'default': "true", episode.id);tmdbid(episode.id);if (kXh?.imdb_id) {uniqueid(type: "imdb", value: kXh.imdb_id, kXh.imdb_id);imdbid(kXh.imdb_id)};if (kXh?.tvdb_id) {uniqueid(type: "tvdb", value: kXh.tvdb_id, kXh.tvdb_id);tvdbid(kXh.tvdb_id)};try {runtime(runtime)} catch (Exception err) {runtime(minutes)};try {if (db.AniDB?.episode?.id) {uniqueid(type: "anidb", value: db.AniDB.episode.id, db.AniDB.episode.id);anidbid(db.AniDB.episode.id)}} catch (Exception err) {};try {if (Xoq) {uniqueid(type: "tvmaze", value: Xoq, Xoq);tvmazeid(Xoq)}} catch (Exception err) {};if (bxP.exists()) {art {poster(GPf)}};MHI.each { lNb ->  actor {name(lNb.YfY);role(lNb.Yjz);sortorder(lNb.da);if (vm) { thumb(lNb.Myh) }}};showtitle(n);episode(IX);season(mTz);try {aired(airdate.format("yyyy-MM-dd"))} catch (Exception err) {};fileinfo {streamdetails {target.mediaInfo.Video.each { ULp ->  video {def QKm = Float.parseFloat(ULp.'Duration');codec(ULp.'Format');micodec(ULp.'Format');bitrate(ULp.'BitRate');width(ULp.'Width');height(ULp.'Height');aspect(ULp.'DisplayAspectRatio/String');aspectratio(ULp.'DisplayAspectRatio/String');framerate(ULp.'FrameRate');'default'(ULp.'Default' == "Yes" ? "True" : "False");forced(ULp.'Forced' == "Yes" ? "True" : "False");duration(ULp.'Duration' ? (int) Math.floor(QKm / 60000) : 0);durationinseconds(ULp.'Duration' ? (int) Math.floor(QKm / 1000) : 0)}};target.mediaInfo.Audio.each { sL ->  audio {codec(sL.'Format');micodec(sL.'Format');language(sL.'Language/String3');channels(sL.'Channel(s)');samplingrate(sL.'SamplingRate');'default'(sL.'Default' == "Yes" ? "True" : "False");forced(sL.'Forced' == "Yes" ? "True" : "False")}};target.mediaInfo.Text.each { bCx ->  subtitle {codec(bCx.'Format');micodec(bCx.'Format');width('0');height('0');language(bCx.'Language/String3');'default'(bCx.'Default' == "Yes" ? "True" : "False");forced(bCx.'Forced' == "Yes" ? "True" : "False")}}}}}}}
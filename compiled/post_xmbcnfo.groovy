{ source, target, metadata -> if (type.toString() != "Episode" || !vf || ext =~ /(ass|srt|ssa|vtt)/) {return null};def ga = target.dir;def cz = any{ s } { 0 };def KHB = any{ e } { special };def Jce = 0;def LNe = null;try {if (db.TheTVDB?.id) {def nT = curl "https://api.tvmaze.com/lookup/shows?thetvdb=${db.TheTVDB.id}";def uH = nT.id;LNe = curl "https://api.tvmaze.com/shows/$uH/episodebynumber?season=$cz&number=$KHB";Jce = LNe.id}} catch (Exception err) {};def dwg = "";def Ps = "en-US";def XOU = null;def PVy = new File("$home/.filebotsecrets.json");if (PVy.exists()) {def Qv = new groovy.json.JsonSlurper().parseText(PVy.text);dwg = Qv.dwg;Ps = Qv.language;XOU = Qv.person_info_dir};def hJv = "https://api.themoviedb.org/3/tv/$id/season/$cz/episode/$KHB";def ork = curl(["accept": "application/json"], "$hJv?language=$Ps&api_key=$dwg");def GKG = curl(["accept": "application/json"], "$hJv/external_ids?api_key=$dwg");def sCH = curl(["accept": "application/json"], "$hJv/credits?language=$Ps&api_key=$dwg");def WC = curl(["accept": "application/json"], "$hJv/images?include_image_language=en%2Cnull&api_key=$dwg");def lFI = (ga / target.nameWithoutExtension + "-thumb.jpg").toString();def GF = new File(lFI);def RFv = new File(lFI.replace("-thumb",""));if (!(GF.exists() || RFv.exists()) && WC.stills.size() > 0) {def yH = "https://image.tmdb.org/t/p/original${WC.stills[0].file_path}";system "curl", "-o", ga / target.nameWithoutExtension + "-thumb.jpg", yH};def yG = [];(sCH.cast + sCH.guest_stars).eachWithIndex { uD, IVj -> def Uls = "$XOU/${uD.name[0]}/${uD.name}";def Tvs = uD.order ?: IVj + yG.size();yG << [LpI: uD.name, am: uD.character, xN: Tvs, Uls: "${Uls}/folder.jpg"];if (XOU) {def kb = new File(Uls);if (!kb.exists()) {kb.mkdirs();system "curl", "-o", "${Uls}/folder.jpg", "https://image.tmdb.org/t/p/original${uD.profile_path}"}}};def UOD = ga / target.nameWithoutExtension + ".nfo";XML(UOD) {mkp.xmlDeclaration(version: "1.0", encoding: "utf-8", standalone: "yes");episodedetails {plot(ork.overview);lockdata("false");dateadded(new Date().format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone("UTC")));title(t);originaltitle(localize."${languages[0]}".t);rating(rating);year(airdate.format("yyyy"));uniqueid(type: "tmdb", value: episode.id, 'default': "true", episode.id);tmdbid(episode.id);if (GKG?.imdb_id) {uniqueid(type: "imdb", value: GKG.imdb_id, GKG.imdb_id);imdbid(GKG.imdb_id)};if (GKG?.tvdb_id) {uniqueid(type: "tvdb", value: GKG.tvdb_id, GKG.tvdb_id);tvdbid(GKG.tvdb_id)};try {runtime(runtime)} catch (Exception err) {runtime(minutes)};try {if (db.AniDB?.episode?.id) {uniqueid(type: "anidb", value: db.AniDB.episode.id, db.AniDB.episode.id);anidbid(db.AniDB.episode.id)}} catch (Exception err) {};try {if (Jce) {uniqueid(type: "tvmaze", value: Jce, Jce);tvmazeid(Jce)}} catch (Exception err) {};if (GF.exists()) {art {poster(lFI)}};yG.each { tm ->  actor {name(tm.LpI);role(tm.am);sortorder(tm.xN);if (XOU) { thumb(tm.Uls) }}};showtitle(n);episode(KHB);season(cz);aired(airdate.format("yyyy-MM-dd"));fileinfo {streamdetails {target.mediaInfo.Video.each { TcB ->  video {def Zn = Float.parseFloat(TcB.'Duration');codec(TcB.'Format');micodec(TcB.'Format');bitrate(TcB.'BitRate');width(TcB.'Width');height(TcB.'Height');aspect(TcB.'DisplayAspectRatio/String');aspectratio(TcB.'DisplayAspectRatio/String');framerate(TcB.'FrameRate');'default'(TcB.'Default' == "Yes" ? "True" : "False");forced(TcB.'Forced' == "Yes" ? "True" : "False");duration(TcB.'Duration' ? (int) Math.floor(Zn / 60000) : 0);durationinseconds(TcB.'Duration' ? (int) Math.floor(Zn / 1000) : 0)}};target.mediaInfo.Audio.each { zV ->  audio {codec(zV.'Format');micodec(zV.'Format');language(zV.'Language/String3');channels(zV.'Channel(s)');samplingrate(zV.'SamplingRate');'default'(zV.'Default' == "Yes" ? "True" : "False");forced(zV.'Forced' == "Yes" ? "True" : "False")}};target.mediaInfo.Text.each { IG ->  subtitle {codec(IG.'Format');micodec(IG.'Format');width('0');height('0');language(IG.'Language/String3');'default'(IG.'Default' == "Yes" ? "True" : "False");forced(IG.'Forced' == "Yes" ? "True" : "False")}}}}}}}
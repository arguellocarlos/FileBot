{ source, target, metadata ->  if (type.toString() != "Episode" && !f.video) {return null};def Tfv = target.dir;def lYP = any{ s } { 0 };def BVD = any{ e } { special };def We = 0;def Ljs = null;try {if (db.TheTVDB?.id) {def ZLB = "https://api.tvmaze.com";def _l = curl "$ZLB/lookup/shows?thetvdb=${db.TheTVDB.id}";def xn = _l.id;Ljs = curl "$ZLB/shows/$xn/episodebynumber?season=$lYP&number=$BVD";We = Ljs.id}} catch (Exception err) {};def nkk = "";def ZvP = "en-US";def OOA = null;def Mw = new File("$home/.filebotsecrets.json");if (Mw.exists()) {def huA = new groovy.json.JsonSlurper().parseText(Mw.text);nkk = huA.nkk;ZvP = huA.language;OOA = huA.person_info_dir};def kOz = "https://api.themoviedb.org/3/tv/$id/season/$lYP/episode/$BVD";def Tro = ["accept": "application/json"];def CNg = curl(Tro, "$kOz?language=$ZvP&api_key=$nkk");def Dmw = curl(Tro, "$kOz/external_ids?api_key=$nkk");def iC = curl(Tro, "$kOz/credits?language=$ZvP&api_key=$nkk");def hWC = curl(Tro, "$kOz/images?include_image_language=en%2Cnull&api_key=$nkk");def nAf = (Tfv / target.nameWithoutExtension + "-thumb.jpg").toString();def EFm = new File(nAf);def rA = new File(nAf.replace("-thumb",""));if (!(EFm.exists() || rA.exists()) && hWC.stills.size() > 0) {def EoL = "https://image.tmdb.org/t/p/original${hWC.stills[0].file_path}";system "curl", "-o", Tfv / target.nameWithoutExtension + "-thumb.jpg", EoL};def vL = [];(iC.cast + iC.guest_stars).eachWithIndex { OP, iT ->  def CuR = "$OOA/${OP.name[0]}/${OP.name}";def WNX = OP.order ?: iT + vL.size();vL << [te: OP.name, VS: OP.character, Hw: WNX, CuR: "${CuR}/folder.jpg"];if (OOA) {def Rin = new File(CuR);if (!Rin.exists()) {Rin.mkdirs();system "curl", "-o", "${CuR}/folder.jpg", "https://image.tmdb.org/t/p/original${OP.profile_path}"}}};def fcB = Tfv / target.nameWithoutExtension + ".nfo";XML(fcB) {mkp.xmlDeclaration(version: "1.0", encoding: "utf-8", standalone: "yes");episodedetails {plot(CNg.overview);lockdata("false");dateadded(new Date().format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone("UTC")));title(t);originaltitle(localize."${languages[0]}".t);rating(rating);try {year(airdate.format("yyyy"))} catch (Exception err) {};uniqueid(type: "tmdb", value: episode.id, 'default': "true", episode.id);tmdbid(episode.id);if (Dmw?.imdb_id) {uniqueid(type: "imdb", value: Dmw.imdb_id, Dmw.imdb_id);imdbid(Dmw.imdb_id)};if (Dmw?.tvdb_id) {uniqueid(type: "tvdb", value: Dmw.tvdb_id, Dmw.tvdb_id);tvdbid(Dmw.tvdb_id)};try {runtime(runtime)} catch (Exception err) {runtime(minutes)};try {if (db.AniDB?.episode?.id) {uniqueid(type: "anidb", value: db.AniDB.episode.id, db.AniDB.episode.id);anidbid(db.AniDB.episode.id)}} catch (Exception err) {};try {if (We) {uniqueid(type: "tvmaze", value: We, We);tvmazeid(We)}} catch (Exception err) {};if (EFm.exists()) {art {poster(nAf)}};vL.each { vy ->  actor {name(vy.te);role(vy.VS);sortorder(vy.Hw);if (OOA) { thumb(vy.CuR) }}};showtitle(n);episode(BVD);season(lYP);try {aired(airdate.format("yyyy-MM-dd"))} catch (Exception err) {};fileinfo {streamdetails {target.mediaInfo.Video.each { sM_ ->  video {def gI = Float.parseFloat(sM_.'Duration');codec(sM_.'Format');micodec(sM_.'Format');bitrate(sM_.'BitRate');width(sM_.'Width');height(sM_.'Height');aspect(sM_.'DisplayAspectRatio/String');aspectratio(sM_.'DisplayAspectRatio/String');framerate(sM_.'FrameRate');'default'(sM_.'Default' == "Yes" ? "True" : "False");forced(sM_.'Forced' == "Yes" ? "True" : "False");duration(sM_.'Duration' ? (int) Math.floor(gI / 60000) : 0);durationinseconds(sM_.'Duration' ? (int) Math.floor(gI / 1000) : 0)}};target.mediaInfo.Audio.each { WYa ->  audio {codec(WYa.'Format');micodec(WYa.'Format');language(WYa.'Language/String3');channels(WYa.'Channel(s)');samplingrate(WYa.'SamplingRate');'default'(WYa.'Default' == "Yes" ? "True" : "False");forced(WYa.'Forced' == "Yes" ? "True" : "False")}};target.mediaInfo.Text.each { fEo ->  subtitle {codec(fEo.'Format');micodec(fEo.'Format');width('0');height('0');language(fEo.'Language/String3');'default'(fEo.'Default' == "Yes" ? "True" : "False");forced(fEo.'Forced' == "Yes" ? "True" : "False")}}}}}}}
{def user_ = System.getProperty("user.name");def mntp = "/run/media/${user_}";def override = "$mntp/Videos";def guess = [home,"$mntp/Data","$mntp/Music","$mntp/Videos","$mntp/Games","$mntp/Books"].collect { it as File }.sort { a,b ->  a.exists() <=> b.exists() ?:a.diskSpace <=> b.diskSpace }.last();def final_ = override ? override : guess;"$final_/"}{"Videos/"}{def known_tags = ["boys' love (bl)","gay theme","yaoi","yuri","lesbian","hentai","hentai","sex","lgbt","explicit","adult animation","adult content"];def tmdb_tv = "TheMovieDB::TV";def known_titles = [[271026,tmdb_tv],[220118,tmdb_tv]];def override_tag = [[236530,tmdb_tv]];def db_name = any { info.database } { "IMDb" };def fixed_id = db_name == "IMDb" ? "tt${id}" : id;def is_adult = any { info.adult } { false };def is_same_id = known_titles.find { it[0] == fixed_id && it[1] == db_name } != null;def is_adult_override = override_tag.find { it[0] == fixed_id && it[1] == db_name } != null;def is_r18 = info.Keywords.findAll { it in known_tags } || is_same_id || is_adult;is_r18 = is_adult_override ? false : is_r18;is_r18 ? "R18+ " : ""}{def cjk_countries = ["CN","JP","KR","KP","TW","HK"];def cjkani_tags = ["aeni","donghua","anime"];def is_anime = any {anime} || info.Keywords.findAll { it in cjkani_tags } || (cjk_countries.contains(country) && genres =~ /Animation/);is_anime ? "Anime/" : "TV Series/"}{def tmdb_tv = "TheMovieDB::TV";def short_title = [[mid:68854,title:"From Me to You",src:tmdb_tv],[mid:229743,title:"VTuber Legend",src:tmdb_tv],[mid:234538,title:"Demon Lord 2099",src:tmdb_tv],[mid:237045,title:"Cherry Magic!",src:tmdb_tv],[mid:240633,title:"A Journey Through Another World",src:tmdb_tv],[mid:245285,title:"Failure Frame",src:tmdb_tv],[mid:271026,title:"Taisho Era Contract Marriage",src:tmdb_tv]];def db_name = any { info.database } { "IMDb" };def fixed_id = db_name == "IMDb" ? "tt${id}" : id;def name_ = n;short_title.each {if (it.mid == fixed_id && it.src == db_name) {name_ = it.title}};def invalid_chars = ['\\','/',':','*','?','"','<','>','|'];def fixed_name = name_.replaceAll(invalid_chars.collect { "\\" + it }.join('|'),'');fixed_name = fixed_name.replaceAll(/(\s|\.)*$/,'');fixed_name}{def tmdb_tv = "TheMovieDB::TV";def show_id = [[ 68854,tmdb_tv],[123542,tmdb_tv],[204098,tmdb_tv],[235973,tmdb_tv],[239779,tmdb_tv],[240125,tmdb_tv],[257162,tmdb_tv],[259140,tmdb_tv],[262295,tmdb_tv],[271026,tmdb_tv],[273190,tmdb_tv],[275695,tmdb_tv]];def is_id_matches = show_id.find { it[0] == id && it[1] == info.database } != null;def db_map = ["TheMovieDB::TV":"tmdbid","AniDB":"anidbid","TheTVDB":"tvdbid","TVmaze":"tvmazeid"];def db_src = db_map[info.database];is_id_matches ? " ($y) [${db_src}-${id}]" : ""}{"/"}{episode.special ? 'Specials' : 'Season '+s}{def invalid_chars = ['\\','/',':','*','?','"','<','>','|'];def fixed_name = sn.replaceAll(invalid_chars.collect { "\\" + it }.join('|'),'_');def fixed_title = n.replaceAll(invalid_chars.collect { "\\" + it }.join('|'),'_');def kv = fixed_name.contains(fixed_title) ? "" : fixed_name;kv == 'Season '+ s ? "" : kv ? " - " + kv : ""}{"/"}{def customGroups = ["Alqanime","BlackLuster","NanDesuKa","ToonsHub","Tsundere-Raws"];def finalGroup = customGroups.find { groupName ->  fn.contains(groupName) } ?:"";def group_ = any {(fn =~ /^\[(.*?)\]/)[0][1]} {finalGroup} {group} {""};group_ ? "[$group_] " : ""}{def tmdb_tv = "TheMovieDB::TV";def short_title = [[mid:68854,title:"From Me to You",src:tmdb_tv],[mid:229743,title:"VTuber Legend",src:tmdb_tv],[mid:234538,title:"Demon Lord 2099",src:tmdb_tv],[mid:237045,title:"Cherry Magic!",src:tmdb_tv],[mid:240633,title:"A Journey Through Another World",src:tmdb_tv],[mid:245285,title:"Failure Frame",src:tmdb_tv],[mid:271026,title:"Taisho Era Contract Marriage",src:tmdb_tv]];def db_name = any { info.database } { "IMDb" };def fixed_id = db_name == "IMDb" ? "tt${id}" : id;def name_ = n;short_title.each {if (it.mid == fixed_id && it.src == db_name) {name_ = it.title}};def invalid_chars = ['\\','/',':','*','?','"','<','>','|'];def fixed_name = name_.replaceAll(invalid_chars.collect { "\\" + it }.join('|'),'');fixed_name = fixed_name.replaceAll(/(\s|\.)*$/,'');fixed_name}{" - "}{s00e00}{def invalid_chars = ['\\','/',':','*','?','"','<','>','|'];def fixed_name = t.replaceAll(invalid_chars.collect { "\\" + it }.join('|'),'_');def epnum = any { e } { special };fixed_name = fixed_name.length() > 100 ? " " : " - $fixed_name ";fixed_name == " - Episode $epnum " ? " " : fixed_name}{" ["}{def custom_releases = [[platform:"ABEMA",aliases:["ABEMA"]],[platform:"Bilibili.tv",aliases:["B-Global","BiliIntl","BILI"]],[platform:"Hulu",aliases:["HULU"]],[platform:"MeWatch",aliases:["MW.WEB-DL"]],[platform:"Netflix",aliases:["NF.WEB-DL","NF WEB"]],[platform:"Prime Video",aliases:["AMZN"]],[platform:"TVer",aliases:["TVER"]],[platform:"Shahid",aliases:["SHAHID"]],[platform:"U-NEXT",aliases:["UNEXT"]],[platform:"YouTube",aliases:["YT.WEB-DL","YOUTUBE","YTB"]]];def reencode_group = ["ASW","Judas","JRx7","EMBER","KawaSubs","GuodongSubs"];def release_group = ["Erai-raws","SubsPlease"];def unlisted_group = any {(fn =~ /^\[(.*?)\]/)[0][1]} {""};def release_ = any {def allas = custom_releases.find { crate ->  crate.aliases.find { aka ->  fn.contains(aka) } }?.aliases.first() ?:"";allas = allas.replace(".WEB-DL","");allas ? "${allas}.WEB-DL" : ""} {source} {reencode_group.find { g_ ->  group == g_ || unlisted_group == g_ } ? "WEBRip" : ""} {def mtag = release_group.find { r_ ->  group == r_ || unlisted_group == r_} ? "WEB-DL" : "";(source == "Erai-raws" && vcf.upper() == "HEVC") ? "WEBRip" : mtag} {vs} {""};release_ ? "$release_ " : ""}{def bdepth = bitdepth ? " ${bitdepth}bit" : "";"$resolution $vcf $bdepth,$ac"}{" "}{af.format(8:'DD+ 7.1',7:'6.1',6:'DD 5.1',5:'5.0',3:'2.1',2:'2.0',1:'1.0')}{def dub = " Dub";def substat = audioLanguages.any { it.ISO3B == language.ISO3B } ? "" : dub;substat = audioLanguages.size() == 1 && audioLanguages.any { it.ISO3B == "und" } ? "" : substat;substat}{def audioLangCount = any { audioLanguages.size() } { 0 };def substat = audioLangCount > 2 ? " MAud" : audioLangCount > 1 ? " DAud" : null;def langs_ = audioLangCount > 5 ? audioLanguages.take(5) : audioLanguages;substat ? substat + langs_.joining(" "," (","").upper() + (audioLangCount > 5 ? " ...)" : ")") : ""}{def textLangCount = any { textLanguages.size() } { 0 };def substat = textLangCount > 2 ? ",MSub" : textLangCount > 1 ? ",DSub" : null;def langs_ = textLangCount > 5 ? textLanguages.take(5) : textLanguages;substat ? substat + langs_.joining(" "," (","").upper() + (textLangCount > 5 ? " ...)" : ")") : ""}{"]["}{crc32.upper()}{"]"}{def known_ext = ["ass","srt","ssa","vtt","ttml"];def langcode = ["name":"." + lang.name,"iso3b":"." + lang.ISO3B,"iso3":"." +lang.ISO3,"iso2":"." + lang.ISO2];def cleanedSubt = subt;langcode.values().each { code -> if (cleanedSubt.contains(code)) {cleanedSubt = cleanedSubt.replace(code,"")}};known_ext.contains(ext) ? langcode.iso3b + cleanedSubt : ""}{def known_ext = ["jpg","jpeg","png","bmp"];known_ext.contains(ext) ? "-thumb" : ""}
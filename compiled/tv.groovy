{def uH = { System.getProperty(it) };def sJ = uH("os.name").toLowerCase().contains("windows");def GF = uH("user.name");def JOA = "/run/media/${GF}";def le = sJ ? "H:/" : "$JOA/Videos";def Qo = [[ING: "Books", KM: "F:/", HD: "$JOA/Books"],[ING: "Data", KM: "D:/", HD: "$JOA/Data"],[ING: "Games", KM: "G:/", HD: "$JOA/Games"],[ING: "Music", KM: "E:/", HD: "$JOA/Music"],[ING: "Videos", KM: "H:/", HD: "$JOA/Videos"]];def _f = (Qo.collect { it[sJ ? "KM" : "HD"] as File }.sort { QOP, YJ ->  QOP.exists() <=> YJ.exists() ?: QOP.diskSpace <=> YJ.diskSpace }).last();def Hen = le ?: _f;"$Hen/"}{"Videos/"}{def iD = ["boys' love (bl)", "gay theme", "yaoi", "yuri", "lesbian", "hentai","sex", "lgbt", "explicit", "adult animation", "adult content","nudity", "animefesta"];def xGu = "TheMovieDB::TV";def kg = [[ 74180, xGu],[ 93821, xGu],[ 95897, xGu],[220118, xGu],[249891, xGu],[271026, xGu]];def fbU = [[236530, xGu]];def wv = any { info.database } { id == tmdbid ? "TheMovieDB" : "IMDb" };def ag = wv == "IMDb" ? "tt${id}" : id;def BSf = any { info.adult } { false };def zx = kg.find { it[0] == ag && it[1] == wv } != null;def IDb = fbU.find { it[0] == ag && it[1] == wv } != null;def uGt = info.Keywords.findAll { it in iD } || zx || BSf;uGt = IDb ? false : uGt;uGt ? "R18+ " : ""}{def lu = ["CN", "JP", "KR", "KP", "TW", "HK"];def CP = ["aeni", "donghua", "anime"];def yz = any {anime} || info.Keywords.findAll { it in CP } || (lu.contains(country) && genres =~ /Animation/);yz ? "Anime/" : "TV Series/"}{def xGu = "TheMovieDB::TV";def GQz = [[qa: 199928, bq: "Nights With a Cat", em: xGu],[qa: 213830, bq: "I Was Reincarnated as the 7th Prince", em: xGu],[qa: 232230, bq: "Lord of the Mysteries", em: xGu],[qa: 248707, bq: "Neko Oji The Guy That Got Reincarnated As a Cat", em: xGu],[qa: 270660, bq: "Pochars", em: xGu],[qa: 277581, bq: "Dekin no Mogura", em: xGu],[qa: 280038, bq: "Apocalypse Bringer Mynoghra", em: xGu],[qa: 280078, bq: "The All-devouring Whale Homecoming", em: xGu],[qa: 283704, bq: "Fermat Kitchen", em: xGu],[qa: 283884, bq: "Chuhai Lips", em: xGu],[qa: 288419, bq: "Chikuwa Senki", em: xGu]];def wv = any { info.database } { id == tmdbid ? "TheMovieDB" : "IMDb" };def ag = wv == "IMDb" ? "tt${id}" : id;def CL = n;GQz.each {if (it.qa == ag && it.em == wv) {CL = it.bq}};def MX = ['\\', '/', ':', '*', '?', '"', '<', '>', '|'];def xG = CL.replaceAll(MX.collect { "\\" + it }.join('|'), '');xG = xG.replaceAll(/(\s|\.)*$/, '');xG}{def xGu = "TheMovieDB::TV";def ish = [[ 95897, xGu],[123542, xGu],[239779, xGu],[257162, xGu],[259140, xGu],[276204, xGu]];def BFT = ish.find { it[0] == id && it[1] == info.database } != null;def lU = ["TheMovieDB::TV": "tmdbid","AniDB": "anidbid","TheTVDB": "tvdbid","TVmaze": "tvmazeid"];def mU = lU[info.database];BFT ? " ($y) [${mU}-${id}]" : ""}{"/"}{episode.special ? 'Specials' : 'Season '+s}{def MX = ['\\', '/', ':', '*', '?', '"', '<', '>', '|'];def xG = sn.replaceAll(MX.collect { "\\" + it }.join('|'), '_');def EAL = n.replaceAll(MX.collect { "\\" + it }.join('|'), '_');def Cj = xG.contains(EAL) ? "" : xG;Cj == 'Season '+ s || Cj == 'Series '+ s ? "" : Cj ? " - " + Cj : ""}{"/"}{def HV = ["Alqanime","BlackLuster","darkflux","It's Anime","Kuramanime","NanDesuKa","ToonsHub","Tsundere-Raws","S1PH3R","Samehadaku"];def yBQ = HV.find { No ->  fn.lower().contains(No.lower()) } ?: "";def Zs = any {yBQ} {(fn =~ /^\[(.*?)\]/)[0][1]} {group} {""};Zs ? "[$Zs] " : ""}{def xGu = "TheMovieDB::TV";def GQz = [[qa: 199928, bq: "Nights With a Cat", em: xGu],[qa: 213830, bq: "I Was Reincarnated as the 7th Prince", em: xGu],[qa: 232230, bq: "Lord of the Mysteries", em: xGu],[qa: 248707, bq: "Neko Oji The Guy That Got Reincarnated As a Cat", em: xGu],[qa: 270660, bq: "Pochars", em: xGu],[qa: 277581, bq: "Dekin no Mogura", em: xGu],[qa: 280038, bq: "Apocalypse Bringer Mynoghra", em: xGu],[qa: 280078, bq: "The All-devouring Whale Homecoming", em: xGu],[qa: 283704, bq: "Fermat Kitchen", em: xGu],[qa: 283884, bq: "Chuhai Lips", em: xGu],[qa: 288419, bq: "Chikuwa Senki", em: xGu]];def wv = any { info.database } { id == tmdbid ? "TheMovieDB" : "IMDb" };def ag = wv == "IMDb" ? "tt${id}" : id;def CL = n;GQz.each {if (it.qa == ag && it.em == wv) {CL = it.bq}};def MX = ['\\', '/', ':', '*', '?', '"', '<', '>', '|'];def xG = CL.replaceAll(MX.collect { "\\" + it }.join('|'), '');xG = xG.replaceAll(/(\s|\.)*$/, '');xG}{" - "}{s00e00}{def MX = ['\\', '/', ':', '*', '?', '"', '<', '>', '|'];def xG = t.replaceAll(MX.collect { "\\" + it }.join('|'), '_');xG = xG.length() > 100 ? " " : " - $xG ";def vAm = any { e } { special };def yX = "Episode $vAm";def ozb = xG.contains(yX) ? '' : xG;ozb != '' ? ozb : ''}{" ["}{def QWO = [["YTB", "YT.WEB-DL", "YOUTUBE"],["ABEMA", "ABEMATV"],["ADN"],["BILI", "B-Global", "BiliIntl"],["BSITE", "BILICN"],["CMIC", "COOLMIC"],["FOD"],["HIDIVE", "HIDI.WEB-DL"],["IQIYI", "IQ.WEB-DL"],["JFFP"],["LFTL", "LAFTEL"],["MDON", "MANGADON"],["MW.WEB-DL"],["NF.WEB-DL", "NF WEB"],["OVEIL", "OV.WEB-DL", "OceanVeil"],["SHAHID"],["TVER"],["UNEXT"],["VIDIO"],["VIU"],["WETV"],["INSTA", "INSTAGRAM"],["ANIMENOTANE"]];def hx = ["ASW", "Judas", "JRx7", "EMBER", "GuodongSubs", "SAMEHADAKU"];def mWe = ["DB"];def xaO = ["Ruri-Saizen"];def PS = ["Erai-raws", "SubsPlease"];def HT = any {(fn =~ /^\[(.*?)\]/)[0][1]} {""};def Qf = any {def fY = QWO.find { aM ->  aM.find { AuR ->  fn.lower().contains(AuR.lower()) } }[0];fY = fY.replace(".WEB-DL", "");if (fn.contains("WEBRip")) {fY = fY.replace(".WEBRip", "");fY = fY + ".WEBRip"} else {fY = fY + ".WEB-DL"};fY} {source} {hx.find { Ny ->  group == Ny || HT == Ny } ? "WEBRip" : ""} {mWe.find { Ny ->  group == Ny || HT == Ny } ? "BDRip" : ""} {xaO.find { Ny ->  group == g__ || HT == g__} ? "HDTVRip" : ""} {def HDq = PS.find { EAL ->  group == EAL || HT == EAL} ? "WEB-DL" : "";(source == "Erai-raws" && vcf.upper() == "HEVC") ? "WEBRip" : HDq} {vs} {""};Qf ? "$Qf " : ""}{def BxD = bitdepth ? " ${bitdepth}bit" : "";"$resolution $vcf $BxD, $ac"}{" "}{af.format(8: 'DD+ 7.1',7: '6.1',6: 'DD 5.1',5: '5.0',3: '2.1',2: '2.0',1: '1.0')}{def zR = any { audioLanguages.size() } { 0 };def QVj = zR > 2 ? " MULTi-AUD" : zR > 1 ? " DUAL-AUD" : "";def yVu = zR > 5 ? audioLanguages.take(5) : audioLanguages;def eYo = audioLanguages.any { it.ISO3B == language.ISO3B } ? "" : " DUBBED";QVj = zR == 1 && audioLanguages.any { it.ISO3B == "und" } ? "" : "$QVj$eYo";QVj ? QVj + yVu.ISO2.joining(" ", " (", "").upper() + (zR > 5 ? " ...)" : ")") : ""}{def uf = text.language.collect {['zh-Hans': 'ZH-S','zh-Hant': 'ZH-T','ar-001': 'AR-MSA'].get(it,it).toUpperCase()}.unique();def np = any { uf.size() } { 0 };def QVj = np > 2 ? ", MULTi" : np > 1 ? ", DUAL" : np == 1 ? ", SUB" : null;def yVu = np > 5 ? uf.take(5) : uf;QVj ? QVj + yVu.joining(" ", " (", "").upper() + (np > 6 ? " ...)" : ")") : ""}{"]["}{crc32.upper()}{"]"}{if (f.subtitle) {def vP = ["name": "." + lang.name,"iso3b": "." + lang.ISO3B,"iso3": "." +lang.ISO3,"iso2": "." + lang.ISO2];def eZw = subt;vP.values().each { Hh -> if (eZw.contains(Hh)) {eZw = eZw.replace(Hh, "")}};vP.iso3b + eZw}}{f.image ? "-thumb" : ""}
{def nsQ = { System.getProperty(it) };def Wx = nsQ("os.name").toLowerCase().contains("windows");def iQd = nsQ("user.name");def xPb = "/run/media/${iQd}";def leP = Wx ? "H:/" : "$xPb/Videos";def Dd = [[tep: "Books", CU: "F:/", YF: "$xPb/Books"],[tep: "Data", CU: "D:/", YF: "$xPb/Data"],[tep: "Games", CU: "G:/", YF: "$xPb/Games"],[tep: "Music", CU: "E:/", YF: "$xPb/Music"],[tep: "Videos", CU: "H:/", YF: "$xPb/Videos"]];def uvN = (Dd.collect { it[Wx ? "CU" : "YF"] as File }.sort { yXE, htn ->  yXE.exists() <=> htn.exists() ?: yXE.diskSpace <=> htn.diskSpace }).last();def zs = leP ?: uvN;"$zs/"}{"Videos/"}{def bV = ["boys' love (bl)", "gay theme", "yaoi", "yuri", "lesbian", "hentai","sex", "lgbt", "explicit", "adult animation", "adult content","nudity", "animefesta"];def xm = "TheMovieDB::TV";def tlJ = [[ 74180, xm],[ 93821, xm],[ 95897, xm],[220118, xm],[249891, xm],[271026, xm]];def XC = [[236530, xm]];def Hw = any { info.database } { id == tmdbid ? "TheMovieDB" : "IMDb" };def ra = Hw == "IMDb" ? "tt${id}" : id;def Kw = any { info.adult } { false };def XVd = tlJ.find { it[0] == ra && it[1] == Hw } != null;def NR = XC.find { it[0] == ra && it[1] == Hw } != null;def PbT = info.Keywords.findAll { it in bV } || XVd || Kw;PbT = NR ? false : PbT;PbT ? "R18+ " : ""}{def nz = ["CN", "JP", "KR", "KP", "TW", "HK"];def ZMD = ["aeni", "donghua", "anime"];def vp = any {anime} || info.Keywords.findAll { it in ZMD } || (nz.contains(country) && genres =~ /Animation/);vp ? "Anime/" : "TV Series/"}{def xm = "TheMovieDB::TV";def svd = [[Qi: 199928, FU: "Nights With a Cat", EeU: xm],[Qi: 219816, FU: "Fate Grand Order Fujimaru Ritsuka Doesn't Get It", EeU: xm],[Qi: 248707, FU: "Neko Oji The Guy That Got Reincarnated As a Cat", EeU: xm],[Qi: 270657, FU: "Tono to Inu", EeU: xm],[Qi: 274741, FU: "The Too-Perfect Saint", EeU: xm]];def Hw = any { info.database } { id == tmdbid ? "TheMovieDB" : "IMDb" };def ra = Hw == "IMDb" ? "tt${id}" : id;def HQ = n;svd.each {if (it.Qi == ra && it.EeU == Hw) {HQ = it.FU}};def _km = ['\\', '/', ':', '*', '?', '"', '<', '>', '|'];def rW = HQ.replaceAll(_km.collect { "\\" + it }.join('|'), '');rW = rW.replaceAll(/(\s|\.)*$/, '');rW}{def xm = "TheMovieDB::TV";def Fah = [[ 95897, xm],[123542, xm],[235973, xm],[239779, xm],[257162, xm],[259140, xm],[276204, xm]];def DHz = Fah.find { it[0] == id && it[1] == info.database } != null;def mUk = ["TheMovieDB::TV": "tmdbid","AniDB": "anidbid","TheTVDB": "tvdbid","TVmaze": "tvmazeid"];def Pi = mUk[info.database];DHz ? " ($y) [${Pi}-${id}]" : ""}{"/"}{episode.special ? 'Specials' : 'Season '+s}{def _km = ['\\', '/', ':', '*', '?', '"', '<', '>', '|'];def rW = sn.replaceAll(_km.collect { "\\" + it }.join('|'), '_');def up = n.replaceAll(_km.collect { "\\" + it }.join('|'), '_');def dXB = rW.contains(up) ? "" : rW;dXB == 'Season '+ s || dXB == 'Series '+ s ? "" : dXB ? " - " + dXB : ""}{"/"}{def _Jv = ["Alqanime","BlackLuster","darkflux","It's Anime","Kuramanime","NanDesuKa","ToonsHub","Tsundere-Raws","S1PH3R","Samehadaku"];def VY = _Jv.find { ZB ->  fn.lower().contains(ZB.lower()) } ?: "";def AEh = any {VY} {(fn =~ /^\[(.*?)\]/)[0][1]} {group} {""};AEh ? "[$AEh] " : ""}{def xm = "TheMovieDB::TV";def svd = [[Qi: 199928, FU: "Nights With a Cat", EeU: xm],[Qi: 219816, FU: "Fate Grand Order Fujimaru Ritsuka Doesn't Get It", EeU: xm],[Qi: 248707, FU: "Neko Oji The Guy That Got Reincarnated As a Cat", EeU: xm],[Qi: 270657, FU: "Tono to Inu", EeU: xm],[Qi: 274741, FU: "The Too-Perfect Saint", EeU: xm]];def Hw = any { info.database } { id == tmdbid ? "TheMovieDB" : "IMDb" };def ra = Hw == "IMDb" ? "tt${id}" : id;def HQ = n;svd.each {if (it.Qi == ra && it.EeU == Hw) {HQ = it.FU}};def _km = ['\\', '/', ':', '*', '?', '"', '<', '>', '|'];def rW = HQ.replaceAll(_km.collect { "\\" + it }.join('|'), '');rW = rW.replaceAll(/(\s|\.)*$/, '');rW}{" - "}{s00e00}{def _km = ['\\', '/', ':', '*', '?', '"', '<', '>', '|'];def rW = t.replaceAll(_km.collect { "\\" + it }.join('|'), '_');rW = rW.length() > 100 ? " " : " - $rW ";def zE = any { e } { special };def vI = "Episode $zE";def JIa = rW.contains(vI) ? '' : rW;JIa != '' ? JIa : ''}{" ["}{def AD = [["YTB", "YT.WEB-DL", "YOUTUBE"],["ABEMA"],["ADN"],["BILI", "B-Global", "BiliIntl"],["BSITE", "BILICN"],["CMIC", "COOLMIC"],["HIDIVE", "HIDI.WEB-DL"],["IQIYI", "IQ.WEB-DL"],["JFFP"],["LAFTEL", "LFTL"],["MDON", "MANGADON"],["MW.WEB-DL"],["NF.WEB-DL", "NF WEB"],["OVEIL", "OV.WEB-DL", "OceanVeil"],["SHAHID"],["TVER"],["UNEXT"],["WETV"]];def CZ = ["ASW", "Judas", "JRx7", "EMBER", "GuodongSubs", "SAMEHADAKU"];def wli = ["DB"];def Xw = ["Ruri-Saizen"];def QRd = ["Erai-raws", "SubsPlease"];def tmH = any {(fn =~ /^\[(.*?)\]/)[0][1]} {""};def YKa = any {def Pw = AD.find { DW ->  DW.find { Vg ->  fn.lower().contains(Vg.lower()) } }[0];Pw = Pw.replace(".WEB-DL", "");if (fn.contains("WEBRip")) {Pw = Pw.replace(".WEBRip", "");Pw = Pw + ".WEBRip"} else {Pw = Pw + ".WEB-DL"};Pw} {source} {CZ.find { rQ ->  group == rQ || tmH == rQ } ? "WEBRip" : ""} {wli.find { rQ ->  group == rQ || tmH == rQ } ? "BDRip" : ""} {Xw.find { rQ ->  group == g__ || tmH == g__} ? "HDTVRip" : ""} {def d_ = QRd.find { IVL ->  group == IVL || tmH == IVL} ? "WEB-DL" : "";(source == "Erai-raws" && vcf.upper() == "HEVC") ? "WEBRip" : d_} {vs} {""};YKa ? "$YKa " : ""}{def VM = bitdepth ? " ${bitdepth}bit" : "";"$resolution $vcf $VM, $ac"}{" "}{af.format(8: 'DD+ 7.1',7: '6.1',6: 'DD 5.1',5: '5.0',3: '2.1',2: '2.0',1: '1.0')}{def EfW = any { audioLanguages.size() } { 0 };def sV = EfW > 2 ? " MULTi-AUD" : EfW > 1 ? " DUAL-AUD" : "";def ecG = EfW > 5 ? audioLanguages.take(5) : audioLanguages;def rZw = audioLanguages.any { it.ISO3B == language.ISO3B } ? "" : " DUBBED";sV = EfW == 1 && audioLanguages.any { it.ISO3B == "und" } ? "" : "$sV$rZw";sV ? sV + ecG.ISO2.joining(" ", " (", "").upper() + (EfW > 5 ? " ...)" : ")") : ""}{def Mz = any { textLanguages.size() } { 0 };def sV = Mz > 2 ? ", MULTi" : Mz > 1 ? ", DUAL" : Mz == 1 ? ", SUB" : null;def ecG = Mz > 5 ? textLanguages.take(5) : textLanguages;sV ? sV + ecG.ISO2.joining(" ", " (", "").upper() + (Mz > 6 ? " ...)" : ")") : ""}{"]["}{crc32.upper()}{"]"}{if (f.subtitle) {def wuc = ["name": "." + lang.name,"iso3b": "." + lang.ISO3B,"iso3": "." +lang.ISO3,"iso2": "." + lang.ISO2];def vr = subt;wuc.values().each { JMJ -> if (vr.contains(JMJ)) {vr = vr.replace(JMJ, "")}};wuc.iso3b + vr}}{f.image ? "-thumb" : ""}